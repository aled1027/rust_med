@use "../tokens" as *;
/* CENTER */

.center-stack {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
}

.center {
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
}

.center[data-direction="column"] {
    flex-direction: column;
}

/* SWITCHER */
.switcher {
    display: flex;
    flex-wrap: wrap;
    gap: var(--s1);
}

.switcher>* {
    flex-grow: 1;
    flex-basis: calc((30rem - 100%) * 999);
}

.switcher> :nth-last-child(n+ 5),
.switcher> :nth-last-child(n+ 5)~* {
    flex-basis: 100%;
}

/* REPEL */
.repel {
    display: flex;
    flex-wrap: wrap;
    justify-content: space-between;
    align-items: var(--repel-vertical-alignment, center);
    gap: var(--gutter, var(--space-m));
}

.repel[data-nowrap] {
    flex-wrap: nowrap;
}

/* MAIN LAYOUT for the page */

.main-layout {
    margin-inline: $main-layout-margin;
    margin-block-start: $space-l;
    width: $main-layout-width;
    padding-inline: 1rem;
}

/* FRAME */
.frame {
    --n: 16;
    --d: 9;
    aspect-ratio: var(--n) / var(--d);
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
}

.frame>img,
.frame>video {
    inline-size: 100%;
    block-size: 100%;
    object-fit: cover;
}


/* GRID */
.grid {
    display: grid;
    grid-template-columns: repeat(var(--grid-placement, auto-fill),
            minmax(var(--grid-min-item-size, 16rem), 1fr));
    gap: var(--gutter, var(--space-l));
}

/* A split 50/50 layout */
.grid[data-layout='50-50'] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 45%, 33rem);
}

/* Three column grid layout */
.grid[data-layout='thirds'] {
    --grid-placement: auto-fit;
    --grid-min-item-size: clamp(16rem, 33%, 20rem);
}

/* CLUSTER */
.cluster {
    display: flex;
    flex-wrap: wrap;


    gap: var(--space, 1rem);
    justify-content: flex-start;
    align-items: center;
    width: fit-content;
    margin-inline: auto;
}

/* BOX */
.box {
    --box-padding: var(--space-m) var(--space-l);
    // Let's rename bg-color-alt and alt2. I had an idea but I can't remember it now
    --box-border-color: var(--color-text-light2);
    --box-bg-color: var(--bg-color-alt);
    --box-box-shadow: $box-shadow-1;

    padding: var(--box-padding);
    border: 1px solid var(--box-border-color);
    border-radius: $radius-m;
    background: var(--box-bg-color);
    box-shadow: var(--box-box-shadow);
}

.box>*:first-child {
    margin-block-start: 0;
}

.box[data-invert] {
    --box-bg-color: var(--color-dark);
    --box-border-color: var(--color-light);
}

.box[data-small] {
    --box-padding: 1rem;
}

.box[data-style="home"] {
    font-size: 1rem;
    font-weight: $font-regular;
    color: inherit;
    filter: brightness(1.1);
    display: flex;
    flex-direction: column;

    & * {
        text-align: left;
    }

    &:hover {
        filter: brightness(1.2);
    }
}